apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/libs/map-matching-library-for-simulation-1.0.2.jar'
}
task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('release/')
    include('classes.jar')
    rename('classes.jar', 'map-matching-library-for-simulation-1.0.2.jar')
}
makeJar.dependsOn(clearJar, build)

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.google.android.gms:play-services:7.0.0'
}

apply plugin: 'maven'

version = '1.1.12' // バージョンをいい感じに書 いてください
group   = 'jp.ac.ritsumei.cs.ubi'
archivesBaseName = 'ubilab-map-matching-library' // 書かなかったらプロジェクト名が使われるらしい



task generateJar(type: Copy) {
    group 'Build'
    description 'blah blah...'
    dependsOn assemble
    from 'build/intermediates/bundles/release/classes.jar'
    into 'build/libs'
    rename('classes.jar', 'ubilab-map-matchinglibrary.jar')
}

// sources Jar
task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

// Javadoc Jar
android.libraryVariants.all { variant ->
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        group 'Docs'
        source = variant.javaCompile.source
        ext.androidJar = files(plugins
                .findPlugin("com.android.library")
                .getBootClasspath())
        classpath = files(variant.javaCompile.classpath.files) +
                ext.androidJar
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}